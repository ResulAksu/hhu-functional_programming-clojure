; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd c:\Users\resul\OneDrive\Desktop\all\hhu-functional_programming-clojure\impl-repl & cmd.exe /d /c lein update-in :dependencies conj [nrepl,"1.0.0"] -- update-in :plugins conj [cider/cider-nrepl,"0.28.5"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- repl :headless & popd
; Using host:port 127.0.0.1:63108 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉>  ; Use `alt+enter` to evaluate
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
nil
clj꞉problems.easy.033꞉> 
#'problems.easy.033/solution
clj꞉problems.easy.033꞉> 
#'problems.easy.033/solution
clj꞉problems.easy.033꞉> 
; AssertionError Assert failed: (and (= (solution [1 2 3] 2) (quote (1 1 2 2 3 3))) (= (solution [:a :b] 4) (quote (:a :a :a :a :b :b :b :b))) (= (solution [4 5 6] 1) (quote (4 5 6))) (= (solution [[1 2] [3 4]] 2) (quote ([1 2] [1 2] [3 4] [3 4]))) (= (solution [44 33] 2) [44 44 33 33]))  problems.easy.033/eval7489 (form-init11150290295027048688.clj:14)
clj꞉problems.easy.033꞉> 
#'problems.easy.033/solution
clj꞉problems.easy.033꞉> 
nil
clj꞉problems.easy.033꞉> 
(1 1 2 2 3 3)
clj꞉problems.easy.033꞉> 
nil
clj꞉problems.easy.034꞉> 
#'problems.easy.034/solution
clj꞉problems.easy.034꞉> 
nil
clj꞉problems.easy.034꞉> 
#'problems.easy.039/solution
clj꞉problems.easy.039꞉> 
; IllegalArgumentException Key must be integer  clojure.lang.APersistentVector.invoke (APersistentVector.java:292)
clj꞉problems.easy.039꞉> 
; IllegalArgumentException Key must be integer  clojure.lang.APersistentVector.invoke (APersistentVector.java:292)
clj꞉problems.easy.039꞉> 
; IllegalArgumentException Key must be integer  clojure.lang.APersistentVector.invoke (APersistentVector.java:292)
clj꞉problems.easy.039꞉> 
#'problems.easy.039/solution
clj꞉problems.easy.039꞉> 
; IllegalArgumentException Key must be integer  clojure.lang.APersistentVector.invoke (APersistentVector.java:292)
clj꞉problems.easy.039꞉> 
; IllegalArgumentException Key must be integer  clojure.lang.APersistentVector.invoke (APersistentVector.java:292)
clj꞉problems.easy.039꞉> 
#'problems.easy.039/solution
clj꞉problems.easy.039꞉> 
nil
clj꞉problems.easy.039꞉> 
(1 :a 2 :b 3 :c)
clj꞉problems.easy.039꞉> 
#'problems.easy.040/solution
clj꞉problems.easy.040꞉> 
; AssertionError Assert failed: (and (= (solution 0 [1 2 3]) [1 0 2 0 3]) (= (apply str (solution ", " ["one" "two" "three"])) "one, two, three") (= (solution :z [:a :b :c :d]) [:a :z :b :z :c :z :d]))  problems.easy.040/eval7657 (form-init11150290295027048688.clj:14)
clj꞉problems.easy.040꞉> 
(0 1 0 2 0 3)
clj꞉problems.easy.040꞉> 
#'problems.easy.040/solution
clj꞉problems.easy.040꞉> 
; AssertionError Assert failed: (and (= (solution 0 [1 2 3]) [1 0 2 0 3]) (= (apply str (solution ", " ["one" "two" "three"])) "one, two, three") (= (solution :z [:a :b :c :d]) [:a :z :b :z :c :z :d]))  problems.easy.040/eval7664 (form-init11150290295027048688.clj:14)
clj꞉problems.easy.040꞉> 
(1 0 2 0 3 0)
clj꞉problems.easy.040꞉> 
#'problems.easy.040/solution
clj꞉problems.easy.040꞉> 
; IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
clj꞉problems.easy.040꞉> 
#'problems.easy.040/solution
clj꞉problems.easy.040꞉> 
(1 0 2 0 3)
clj꞉problems.easy.040꞉> 
nil
clj꞉problems.easy.040꞉> 
#'problems.easy.041/solution
clj꞉problems.easy.041꞉> 
; AssertionError Assert failed: (and (= (solution [1 2 3 4 5 6 7 8] 3) [1 2 4 5 7 8]) (= (solution [:a :b :c :d :e :f] 2) [:a :c :e]) (= (solution [1 2 3 4 5 6] 4) [1 2 3 5 6]))  problems.easy.041/eval7719 (form-init11150290295027048688.clj:14)
clj꞉problems.easy.041꞉> 
()
clj꞉problems.easy.041꞉> 
#'problems.easy.041/solution
clj꞉problems.easy.041꞉> 
(1 2 3 4 5 6 7 8)
clj꞉problems.easy.041꞉> 
#'problems.easy.041/solution
clj꞉problems.easy.041꞉> 
(1 4 7)
clj꞉problems.easy.041꞉> 
#'problems.easy.041/solution
clj꞉problems.easy.041꞉> 
; AssertionError Assert failed: (and (= (solution [1 2 3 4 5 6 7 8] 3) [1 2 4 5 7 8]) (= (solution [:a :b :c :d :e :f] 2) [:a :c :e]) (= (solution [1 2 3 4 5 6] 4) [1 2 3 5 6]))  problems.easy.041/eval7750 (form-init11150290295027048688.clj:14)
clj꞉problems.easy.041꞉> 
(1 2 3 4 5 6 7 8)
clj꞉problems.easy.041꞉> 
#'problems.easy.041/drop-every-nth-accumulating
clj꞉problems.easy.041꞉> 
#'problems.easy.041/solution
clj꞉problems.easy.041꞉> 
; ClassCastException class clojure.lang.PersistentVector cannot be cast to class java.lang.Number (clojure.lang.PersistentVector is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')  clojure.lang.Numbers.dec (Numbers.java:120)
clj꞉problems.easy.041꞉> 
; ClassCastException class clojure.lang.PersistentVector cannot be cast to class java.lang.Number (clojure.lang.PersistentVector is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')  clojure.lang.Numbers.dec (Numbers.java:120)
clj꞉problems.easy.041꞉> 
#'problems.easy.041/solution
clj꞉problems.easy.041꞉> 
; AssertionError Assert failed: (and (= (solution [1 2 3 4 5 6 7 8] 3) [1 2 4 5 7 8]) (= (solution [:a :b :c :d :e :f] 2) [:a :c :e]) (= (solution [1 2 3 4 5 6] 4) [1 2 3 5 6]))  problems.easy.041/eval7771 (form-init11150290295027048688.clj:23)
clj꞉problems.easy.041꞉> 
(((1 2) 4 5 6 7))
clj꞉problems.easy.041꞉> 
#'problems.easy.041/solution
clj꞉problems.easy.041꞉> 
; IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
clj꞉problems.easy.041꞉> 
#'problems.easy.041/solution
clj꞉problems.easy.041꞉> 
(1 2 4 5 7 8)
clj꞉problems.easy.041꞉> 
nil
clj꞉problems.easy.041꞉> 
#'problems.easy.041/solution
clj꞉problems.easy.041꞉> 
; UnsupportedOperationException count not supported on this type: Long  clojure.lang.RT.countFrom (RT.java:646)
clj꞉problems.easy.041꞉> 
#'problems.easy.041/solution
clj꞉problems.easy.041꞉> 
