(x) 05_,04_,07_,08_,09_.clj
(x) Videos: Destructing, Recursion
(x) 4Clojure: 43

-Videos:
    -Recursion: 
        Problem: Stackoverflow JVM
        Lösung: (defn add ([xs] (add 0 xs))
                    ([n xs] (if (seq xs) 
                        (recur (+ n (first xs))
                            (rest xs))
                            n)))
                (defn add [xs] (loop [n 0 xs xs]
                     (if (seq xs) 
                        (recur (+ n (first xs))
                            (rest xs))
                            n)))
                -> recur muss tail sein (also am Ende)
                         muss selbe Funktion aufrufen
        Lösung für zwei Fkt die sich ggs aufrufen:
            : trampoline 

-05_recursion.clj:
    - (defn ! [n] (if (= 1 n) n (*' n (recur (dec n)))))
    -  (defn ! [n] (loop [n n a 1] (if (= 0 n) a
            (recur (dec n) (*' a n)))))
        => (defn ! [n] ...): Definiert eine Funktion namens ! mit einem Parameter n.
            (loop [n n a 1] ...): Startet eine Schleife mit zwei Bindungen: n, das initial den Wert des Parameters n hat, und a, das initial den Wert 1 hat. a wird verwendet, um das Ergebnis der Fakultätsberechnung zu akkumulieren.
            (if (= 0 n) a ...): Überprüft, ob n gleich 0 ist. Wenn ja, gibt die Funktion den aktuellen Wert von a zurück, da die Fakultät von 0 als 1 definiert ist. Dies dient als Abbruchbedingung der Rekursion.
            (recur (dec n) (*' a n)): Ist der rekursive Teil der Funktion. Wenn n nicht 0 ist, ruft recur die Schleife erneut auf, wobei n um 1 verringert (dec n) und a mit n multipliziert wird (*' a n). 
                Das *' ist eine Variante der Multiplikation in Clojure, die genaue Arithmetik für sehr große Zahlen unterstützt.

-04_destruction.clj:
    - 

4Clojure:
    Medium 43.clj:
        -(defn solution [nums blocks] (apply map list (partition blocks nums)))
        -(assert (= (solution [1 2 3 4 5 6] 2) (quote ((1 3 5) (2 4 6)))))
    