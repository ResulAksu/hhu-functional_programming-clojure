(x) 4Clojure 1-3, 162
(x) 4Clojure 4–13, 15–16, 35, 37, 57, 134, 145, 156, 161
(x) 4Clojure 17-18, 64, 19–25, 27, 29–33, 38, 42, 45, 46, 59
(x) 4Clojure (M)43
(x) 4Clojure (EASY)26,28,30,31,33,34,39,40,47,48,49,61,62,63,66

26.clj-fibonacci:
- (defn solution [x]  (letfn [(fib-helper [a b x] (if (zero? x) []  (cons a (fib-helper b (+ a b) (dec x)))))] (fib-helper 1 1 x)))
28.clj-flatten:
- (defn solution [args] (flatten args))
30.clj-consecutive-duplicate:
- (defn solution [args]
  (reduce (fn [acc item]
            (if (and (not-empty acc) (= (last acc) item))
              acc
              (conj acc item)))
          []  %% starts acc with empty 
          args %% in fn call args => item))
31.clj-consecutive-duplicate-sublist:
- (defn solution [args] 
    (reduce (fn [acc item]
              (if (and (not-empty acc) (= (last (last acc)) item))
                (update-in acc [(dec (count acc))] conj item)
                (conj acc [item])))
            []
            args))
33.clj-replicate-each-element
- (defn solution
    [args n] (mapcat #(repeat n %) args))
34.clj-range
- (defn solution
   [start end] (range start end))
39.clj-Interleave
- (defn solution
  [seq1 seq2]
  (interleave seq1 seq2))
   => (solution [1 2 3] [:a :b :c]) => (1 :a 2 :b 3 :c)
40.clj-Interleave
- (defn solution
  [value se] (butlast  (interleave se (repeat value))))
  => (solution 0 [1 2 3]) => (1 0 2 0 3)
47.clj-contains?
- if on Map or HashSet it checks the value
- if on vector or list it checks the index
48.clj-some
- either returns true/false for predicate
- or returns first number some #{7 6 2} [5 6 7 8] => 6 
49.clj-split-at
- split coll at index (split-at index coll)
61.clj- vector of keys and vector of values to map
- (defn solution [keys values] (zipmap keys values))
62.clj- infinite lazy sequence of x, (f x), (f (f x)), (f (f (f x))), etc."
(defn solution [f x] (lazy-seq (cons x (solution f (f x)))))
   => side-effect free
63.clj-group-by 
- (defn solution [f args] (group-by f args) )
66.clj-gcd 
- (defn solution [int1 int2]
    (if (zero? int1) 
    int2
    (recur (mod int2 int1) int1)))
=> C Code: 
int gcd(int a, int b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
81.clj-common-numbers-in-two-sets
(defn solution
  [set1 set2]
  (set(filter identity(map set1 set2))))
